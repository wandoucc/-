{"_id":"9f2a34705fe8891c00c8e9ea79366654","id":6.0,"second_id":1.609074971227E+12,"title":"描述一下编写loader或plugin的思路？","type":"工程化","_openid":"oSMUE5XPRyCG9bJZOvbHh5mUdMqw","company":"未知","detail":"<p>Loader像一个&quot;翻译官&quot;把读到的源文件内容转义成新的文件内容，并且每个Loader通过链式操作，将源文件一步步翻译成想要的样子。</p>\n<p>编写Loader时要遵循单一原则，每个Loader只做一种&quot;转义&quot;工作。 每个Loader的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用this.callback()方法，将内容返回给webpack。 还可以通过 this.async()生成一个callback函数，再用这个callback将处理后的内容输出出去。 此外webpack还为开发者准备了开发loader的工具函数集——loader-utils。</p>\n<p>相对于Loader而言，Plugin的编写就灵活了许多。 webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>\n","fister_id":1.608977845929E+12}
